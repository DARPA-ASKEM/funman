(set-logic QF_NRA)
(declare-fun i_0 () Real)
(declare-fun i_1 () Real)
(declare-fun i_2 () Real)
(declare-fun s_0 () Real)
(declare-fun s_1 () Real)
(declare-fun beta_0 () Real)
(declare-fun gamma () Real)
(declare-fun delta () Real)
(declare-fun n () Real)
(declare-fun scale_1 () Real)
(declare-fun r_n_1 () Real)
(declare-fun i_n_1 () Real)
(declare-fun s_n_1 () Real)
(declare-fun r_0 () Real)
(declare-fun r_1 () Real)
(assert (let ((.def_0 (= delta 0.0))) (let ((.def_1 (= gamma 0.07142857142857142))) (let ((.def_2 (and .def_1 .def_0))) (let ((.def_3 (+ s_0 i_0))) (let ((.def_4 (+ .def_3 r_0))) (let ((.def_5 (= n .def_4))) (let ((.def_6 (= r_0 1.0))) (let ((.def_7 (= i_0 1.0))) (let ((.def_8 (= s_0 1000.0))) (let ((.def_9 (and .def_8 .def_7 .def_6 .def_5))) (let ((.def_10 (and .def_9 .def_2))) .def_10))))))))))))
(push 1)
(assert (let ((.def_0 (* n 0.1))) (let ((.def_1 (< i_0 .def_0))) .def_1)))
(push 1)
(assert (let ((.def_0 (<= 0.0 i_n_1))) (let ((.def_1 (<= i_n_1 n))) (let ((.def_2 (<= 0.0 s_n_1))) (let ((.def_3 (<= s_n_1 n))) (let ((.def_4 (<= 0.0 r_n_1))) (let ((.def_5 (<= r_n_1 n))) (let ((.def_6 (* gamma i_0))) (let ((.def_7 (* beta_0 s_0))) (let ((.def_8 (* .def_7 i_0))) (let ((.def_9 (- .def_8 .def_6))) (let ((.def_10 (+ .def_9 i_0))) (let ((.def_11 (= i_n_1 .def_10))) (let ((.def_12 (* beta_0 (- 1.0)))) (let ((.def_13 (* .def_12 s_0))) (let ((.def_14 (* .def_13 i_0))) (let ((.def_15 (+ .def_14 s_0))) (let ((.def_16 (= s_n_1 .def_15))) (let ((.def_17 (+ .def_6 r_0))) (let ((.def_18 (= r_n_1 .def_17))) (let ((.def_19 (and .def_18 .def_16 .def_11 .def_5 .def_4 .def_3 .def_2 .def_1 .def_0))) .def_19)))))))))))))))))))))
(push 1)
(assert (let ((.def_0 (<= 0.0 scale_1))) (let ((.def_1 (<= scale_1 1.0))) (let ((.def_2 (+ s_n_1 i_n_1))) (let ((.def_3 (+ .def_2 r_n_1))) (let ((.def_4 (/ n .def_3))) (let ((.def_5 (= scale_1 .def_4))) (let ((.def_6 (and .def_5 .def_1 .def_0))) .def_6))))))))
(push 1)
(assert (let ((.def_0 (<= 0.0 i_1))) (let ((.def_1 (<= i_1 n))) (let ((.def_2 (<= 0.0 s_1))) (let ((.def_3 (<= s_1 n))) (let ((.def_4 (<= 0.0 r_1))) (let ((.def_5 (<= r_1 n))) (let ((.def_6 (* r_n_1 scale_1))) (let ((.def_7 (= r_1 .def_6))) (let ((.def_8 (* i_n_1 scale_1))) (let ((.def_9 (= i_1 .def_8))) (let ((.def_10 (* s_n_1 scale_1))) (let ((.def_11 (= s_1 .def_10))) (let ((.def_12 (and .def_11 .def_9 .def_7 .def_5 .def_4 .def_3 .def_2 .def_1 .def_0))) .def_12))))))))))))))
(push 1)
(assert (let ((.def_0 (* n 0.1))) (let ((.def_1 (< i_2 .def_0))) .def_1)))
(push 1)
(check-sat)
