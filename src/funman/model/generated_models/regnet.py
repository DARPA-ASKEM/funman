# generated by datamodel-codegen:
#   filename:  regnet_schema.json
#   timestamp: 2023-10-13T14:48:29+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class Header(BaseModel):
    model_config = ConfigDict(protected_namespaces=())
    name: str
    schema_: AnyUrl = Field(..., alias="schema")
    schema_name: Optional[str] = None
    description: str
    model_version: Optional[str] = None


class Distribution(BaseModel):
    type: str
    parameters: Dict[str, Any]


class Grounding(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    identifiers: Optional[Dict[str, Any]] = None
    modifiers: Optional[Dict[str, Any]] = None


class ParamOrNumber(RootModel[Union[float, str]]):
    root: Union[float, str]


class SignedGraphElement(BaseModel):
    id: str
    sign: bool


class Parameter(BaseModel):
    id: str
    description: Optional[str] = None
    value: Optional[float] = None
    grounding: Optional[Grounding] = None
    distribution: Optional[Distribution] = None


class BaseProperties(BaseModel):
    name: Optional[str] = None
    grounding: Optional[Grounding] = None
    rate_constant: Optional[ParamOrNumber] = None


class Vertice(SignedGraphElement, BaseProperties):
    initial: Optional[ParamOrNumber] = None


class Edge(SignedGraphElement):
    source: str
    target: str
    properties: Optional[BaseProperties] = None


class Model1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    vertices: List[Vertice]
    edges: List[Edge]
    parameters: Optional[List[Parameter]] = None


class Model(BaseModel):
    header: Header
    properties: Optional[Dict[str, Any]] = None
    model: Model1
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="(Optional) Information not useful for execution of the model, but that may be useful to some consumer in the future. E.g. creation timestamp or source paper's author.",
    )
